package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var clusterMemberObjects = RegisterStmt(`
SELECT cluster_members.id, cluster_members.name, cluster_members.address, cluster_members.certificate, cluster_members.schema, cluster_members.heartbeat, cluster_members.role
  FROM cluster_members
  ORDER BY cluster_members.address
`)

var clusterMemberObjectsByAddress = RegisterStmt(`
SELECT cluster_members.id, cluster_members.name, cluster_members.address, cluster_members.certificate, cluster_members.schema, cluster_members.heartbeat, cluster_members.role
  FROM cluster_members
  WHERE cluster_members.address = ? ORDER BY cluster_members.address
`)

var clusterMemberID = RegisterStmt(`
SELECT cluster_members.id FROM cluster_members
  WHERE cluster_members.address = ?
`)

var clusterMemberCreate = RegisterStmt(`
INSERT INTO cluster_members (name, address, certificate, schema, heartbeat, role)
  VALUES (?, ?, ?, ?, ?, ?)
`)

var clusterMemberDeleteByAddress = RegisterStmt(`
DELETE FROM cluster_members WHERE address = ?
`)

var clusterMemberUpdate = RegisterStmt(`
UPDATE cluster_members
  SET name = ?, address = ?, certificate = ?, schema = ?, heartbeat = ?, role = ?
 WHERE id = ?
`)

// GetClusterMembers returns all available cluster_members.
// generator: cluster_member GetMany
func GetClusterMembers(ctx context.Context, tx *sql.Tx, filter ClusterMemberFilter) ([]ClusterMember, error) {
	var err error

	// Result slice.
	objects := make([]ClusterMember, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	var args []any

	if filter.Address != nil {
		sqlStmt = stmt(tx, clusterMemberObjectsByAddress)
		args = []any{
			filter.Address,
		}
	} else if filter.Address == nil {
		sqlStmt = stmt(tx, clusterMemberObjects)
		args = []any{}
	} else {
		return nil, fmt.Errorf("No statement exists for the given Filter")
	}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, ClusterMember{})
		return []any{
			&objects[i].ID,
			&objects[i].Name,
			&objects[i].Address,
			&objects[i].Certificate,
			&objects[i].Schema,
			&objects[i].Heartbeat,
			&objects[i].Role,
		}
	}

	// Select.
	err = query.SelectObjects(sqlStmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_members\" table: %w", err)
	}

	return objects, nil
}

// GetClusterMember returns the cluster_member with the given key.
// generator: cluster_member GetOne
func GetClusterMember(ctx context.Context, tx *sql.Tx, address string) (*ClusterMember, error) {
	filter := ClusterMemberFilter{}
	filter.Address = &address

	objects, err := GetClusterMembers(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_members\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "ClusterMember not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"cluster_members\" entry matches")
	}
}

// GetClusterMemberID return the ID of the cluster_member with the given key.
// generator: cluster_member ID
func GetClusterMemberID(ctx context.Context, tx *sql.Tx, address string) (int64, error) {
	stmt := stmt(tx, clusterMemberID)
	rows, err := stmt.Query(address)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"cluster_members\" ID: %w", err)
	}

	defer func() { _ = rows.Close() }()

	// Ensure we read one and only one row.
	if !rows.Next() {
		return -1, api.StatusErrorf(http.StatusNotFound, "ClusterMember not found")
	}
	var id int64
	err = rows.Scan(&id)
	if err != nil {
		return -1, fmt.Errorf("Failed to scan ID: %w", err)
	}

	if rows.Next() {
		return -1, fmt.Errorf("More than one row returned")
	}
	err = rows.Err()
	if err != nil {
		return -1, fmt.Errorf("Result set failure: %w", err)
	}

	return id, nil
}

// ClusterMemberExists checks if a cluster_member with the given key exists.
// generator: cluster_member Exists
func ClusterMemberExists(ctx context.Context, tx *sql.Tx, address string) (bool, error) {
	_, err := GetClusterMemberID(ctx, tx, address)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}
		return false, err
	}

	return true, nil
}

// CreateClusterMember adds a new cluster_member to the database.
// generator: cluster_member Create
func CreateClusterMember(ctx context.Context, tx *sql.Tx, object ClusterMember) (int64, error) {
	// Check if a cluster_member with the same key exists.
	exists, err := ClusterMemberExists(ctx, tx, object.Address)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"cluster_members\" entry already exists")
	}

	args := make([]any, 6)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.Address
	args[2] = object.Certificate
	args[3] = object.Schema
	args[4] = object.Heartbeat
	args[5] = object.Role

	// Prepared statement to use.
	stmt := stmt(tx, clusterMemberCreate)

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"cluster_members\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"cluster_members\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteClusterMember deletes the cluster_member matching the given key parameters.
// generator: cluster_member DeleteOne-by-Address
func DeleteClusterMember(ctx context.Context, tx *sql.Tx, address string) error {
	stmt := stmt(tx, clusterMemberDeleteByAddress)
	result, err := stmt.Exec(address)
	if err != nil {
		return fmt.Errorf("Delete \"cluster_members\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "ClusterMember not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d ClusterMember rows instead of 1", n)
	}

	return nil
}

// UpdateClusterMember updates the cluster_member matching the given key parameters.
// generator: cluster_member Update
func UpdateClusterMember(ctx context.Context, tx *sql.Tx, address string, object ClusterMember) error {
	id, err := GetClusterMemberID(ctx, tx, address)
	if err != nil {
		return err
	}

	stmt := stmt(tx, clusterMemberUpdate)
	result, err := stmt.Exec(object.Name, object.Address, object.Certificate, object.Schema, object.Heartbeat, object.Role, id)
	if err != nil {
		return fmt.Errorf("Update \"cluster_members\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
