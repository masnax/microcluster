package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var secretObjects = RegisterStmt(`
SELECT secrets.id, certificates.fingerprint AS certificate, secrets.token, secrets.name
  FROM secrets JOIN certificates ON secrets.certificate_id = certificates.id
  ORDER BY secrets.name
`)

var secretObjectsByName = RegisterStmt(`
SELECT secrets.id, certificates.fingerprint AS certificate, secrets.token, secrets.name
  FROM secrets JOIN certificates ON secrets.certificate_id = certificates.id
  WHERE secrets.name = ? ORDER BY secrets.name
`)

var secretObjectsByCertificate = RegisterStmt(`
SELECT secrets.id, certificates.fingerprint AS certificate, secrets.token, secrets.name
  FROM secrets JOIN certificates ON secrets.certificate_id = certificates.id
  WHERE certificate = ? ORDER BY secrets.name
`)

var secretObjectsByCertificateAndName = RegisterStmt(`
SELECT secrets.id, certificates.fingerprint AS certificate, secrets.token, secrets.name
  FROM secrets JOIN certificates ON secrets.certificate_id = certificates.id
  WHERE certificate = ? AND secrets.name = ? ORDER BY secrets.name
`)

var secretID = RegisterStmt(`
SELECT secrets.id FROM secrets
  WHERE secrets.name = ?
`)

var secretCreate = RegisterStmt(`
INSERT INTO secrets (certificate_id, token, name)
  VALUES ((SELECT certificates.id FROM certificates WHERE certificates.fingerprint = ?), ?, ?)
`)

var secretDeleteByName = RegisterStmt(`
DELETE FROM secrets WHERE name = ?
`)

// GetSecrets returns all available secrets.
// generator: secret GetMany
func GetSecrets(ctx context.Context, tx *sql.Tx, filter SecretFilter) ([]Secret, error) {
	var err error

	// Result slice.
	objects := make([]Secret, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	var args []any

	if filter.Certificate != nil && filter.Name != nil && filter.ID == nil && filter.Token == nil {
		sqlStmt = stmt(tx, secretObjectsByCertificateAndName)
		args = []any{
			filter.Certificate,
			filter.Name,
		}
	} else if filter.Name != nil && filter.ID == nil && filter.Certificate == nil && filter.Token == nil {
		sqlStmt = stmt(tx, secretObjectsByName)
		args = []any{
			filter.Name,
		}
	} else if filter.Certificate != nil && filter.ID == nil && filter.Token == nil && filter.Name == nil {
		sqlStmt = stmt(tx, secretObjectsByCertificate)
		args = []any{
			filter.Certificate,
		}
	} else if filter.ID == nil && filter.Certificate == nil && filter.Token == nil && filter.Name == nil {
		sqlStmt = stmt(tx, secretObjects)
		args = []any{}
	} else {
		return nil, fmt.Errorf("No statement exists for the given Filter")
	}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, Secret{})
		return []any{
			&objects[i].ID,
			&objects[i].Certificate,
			&objects[i].Token,
			&objects[i].Name,
		}
	}

	// Select.
	err = query.SelectObjects(sqlStmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"secrets\" table: %w", err)
	}

	return objects, nil
}

// GetSecretID return the ID of the secret with the given key.
// generator: secret ID
func GetSecretID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt := stmt(tx, secretID)
	rows, err := stmt.Query(name)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"secrets\" ID: %w", err)
	}

	defer rows.Close()

	// Ensure we read one and only one row.
	if !rows.Next() {
		return -1, api.StatusErrorf(http.StatusNotFound, "Secret not found")
	}
	var id int64
	err = rows.Scan(&id)
	if err != nil {
		return -1, fmt.Errorf("Failed to scan ID: %w", err)
	}

	if rows.Next() {
		return -1, fmt.Errorf("More than one row returned")
	}
	err = rows.Err()
	if err != nil {
		return -1, fmt.Errorf("Result set failure: %w", err)
	}

	return id, nil
}

// SecretExists checks if a secret with the given key exists.
// generator: secret Exists
func SecretExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetSecretID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}
		return false, err
	}

	return true, nil
}

// CreateSecret adds a new secret to the database.
// generator: secret Create
func CreateSecret(ctx context.Context, tx *sql.Tx, object Secret) (int64, error) {
	// Check if a secret with the same key exists.
	exists, err := SecretExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"secrets\" entry already exists")
	}

	args := make([]any, 3)

	// Populate the statement arguments.
	args[0] = object.Certificate
	args[1] = object.Token
	args[2] = object.Name

	// Prepared statement to use.
	stmt := stmt(tx, secretCreate)

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"secrets\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"secrets\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteSecret deletes the secret matching the given key parameters.
// generator: secret DeleteOne-by-Name
func DeleteSecret(ctx context.Context, tx *sql.Tx, name string) error {
	stmt := stmt(tx, secretDeleteByName)
	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"secrets\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Secret not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Secret rows instead of 1", n)
	}

	return nil
}
